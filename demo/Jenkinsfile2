pipeline {
    agent any

    environment {
        // ... (bagian ini tidak berubah)
        MAVEN_HOME = tool 'Maven-3.9.11'
        JAVA_HOME = tool 'JDK-21'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"

        DOCKER_REPO_NAME = "panduass/springboot-openshift" 
        DOCKER_IMAGE_TAG = "v3"
        DOCKER_IMAGE = "${DOCKER_REPO_NAME}:${env.BUILD_NUMBER}"
        DOCKER_LATEST_IMAGE = "${DOCKER_REPO_NAME}:${DOCKER_IMAGE_TAG}"

        PROJECT_DIR = "demo"
        
        // Perbaikan di sini
        OC_SERVER = 'https://api.rm1.0a51.p1.openshiftapps.com:6443' // Ganti dengan URL API OpenShift Anda
        OC_PROJECT = 'panduass-dev' // Ganti dengan nama proyek (namespace) OpenShift Anda
        OC_APP_NAME = 'springboot-openshift-v3' // Nama aplikasi di OpenShift
        OC_APP_PORT = '8080' // Port yang digunakan oleh aplikasi Spring Boot
    }

    stages {
        // ... (stages Checkout, Build & Package, Build Docker Image, Push Docker Image tidak berubah)
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/panduass/springboot-openshift.git'
            }
        }
        
        stage('Build & Package') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'mvn clean package -DskipTests'
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${PROJECT_DIR}/target/*.jar", fingerprint: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    dir("${PROJECT_DIR}") {
                        sh "docker build -t ${DOCKER_LATEST_IMAGE} -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}
                        docker push ${DOCKER_LATEST_IMAGE}
                        docker logout
                    '''
                }
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                script {
                    echo 'Deploying to OpenShift using direct `oc` commands...'
                    // Gunakan 'secretText' untuk token OpenShift
                    withCredentials([string(credentialsId: 'openshift-token', variable: 'OC_TOKEN')]) {
                        // 1. Login ke OpenShift menggunakan token
                        sh "oc login --token=${OC_TOKEN} --server=${OC_SERVER} --insecure-skip-tls-verify=true"
                        sh "oc project ${OC_PROJECT}"

                        // 2. Cek apakah aplikasi sudah ada. Jika belum, buat baru. Jika sudah, update image-nya.
                        sh """
                          if oc get dc ${OC_APP_NAME} > /dev/null 2>&1; then
                            echo "DeploymentConfig ${OC_APP_NAME} sudah ada, melakukan update image..."
                            oc set image dc/${OC_APP_NAME} ${OC_APP_NAME}=${DOCKER_LATEST_IMAGE} --insecure-skip-tls-verify=true
                          else
                            echo "DeploymentConfig ${OC_APP_NAME} belum ada, membuat aplikasi baru..."
                            oc new-app --image=${DOCKER_LATEST_IMAGE} --name=${OC_APP_NAME}
                            
                            // Expose port untuk membuat service dan route (hanya sekali saat deploy pertama kali)
                            oc expose service ${OC_APP_NAME} --port=${OC_APP_PORT} --name=${OC_APP_NAME}
                            oc expose route ${OC_APP_NAME} --port=${OC_APP_PORT} --name=${OC_APP_NAME}
                          fi
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Application deployed to OpenShift successfully! ✅'
        }
        failure {
            echo 'Deployment failed. Please check the logs. ❌'
        }
    }
}