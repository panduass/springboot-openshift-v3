pipeline {
    agent any

    environment {
        // Informasi Docker
        DOCKER_IMAGE = "panduass/springboot-openshift-demo"
        DOCKER_CREDENTIALS_ID = "docker-hub"
        
        // Informasi GitHub
        GITHUB_REPO = "https://github.com/panduass/springboot-openshift-v3/"
        GITHUB_BRANCH = "master"

        // Informasi OpenShift
        OPENSHIFT_SERVER = "https://api.rm1.0a51.p1.openshiftapps.com:6443"
        OPENSHIFT_PROJECT = "panduass-dev"
        OPENSHIFT_CREDENTIALS_ID = "openshift-v3"
        OC_APP_NAME = "springboot-openshift-demo"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning dari GitHub...'
                git url: "${env.GITHUB_REPO}", branch: "${env.GITHUB_BRANCH}"
            }
        }

        stage('Build & Package') {
            steps {
                script {
                    // Ambil JDK-21 dari konfigurasi Jenkins Tools
                    def javaHome = tool name: 'JDK-21', type: 'hudson.model.JDK'
                    env.JAVA_HOME = javaHome
                    env.PATH = "${javaHome}/bin:${env.PATH}"

                    // Tampilkan versi Java & Maven
                    echo "Menggunakan JAVA_HOME=${env.JAVA_HOME}"
                    sh 'java -version'
                    sh 'mvn -v'

                    // Fail cepat kalau bukan Java 21
                    sh '''
                        JAVA_VER=$(java -version 2>&1 | head -n 1 | grep '21')
                        if [ -z "$JAVA_VER" ]; then
                            echo "ERROR: Java bukan versi 21!"
                            exit 1
                        fi
                    '''
                }

                echo 'Melakukan Build dan Packaging dengan Maven...'
                dir('demo') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.DOCKER_TAG = "v${env.BUILD_NUMBER}"
                    echo "Membangun Docker image: ${DOCKER_IMAGE}:${env.DOCKER_TAG}"
                    dir('demo') {
                        docker.build("${DOCKER_IMAGE}:${env.DOCKER_TAG}")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Mendorong Docker image ke Docker Hub"
                    docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy ke OpenShift') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${OPENSHIFT_CREDENTIALS_ID}", variable: 'OC_TOKEN')]) {
                        echo "Masuk ke OpenShift..."
                        sh "oc login --token=${OC_TOKEN} --server=${OPENSHIFT_SERVER} --insecure-skip-tls-verify=true"
                        sh "oc project ${OPENSHIFT_PROJECT}"

                        echo "Memeriksa deployment yang sudah ada..."
                        def deploymentExists = sh(script: "oc get dc ${OC_APP_NAME} > /dev/null 2>&1 || [ \$? -eq 1 ]", returnStatus: true) == 0
                        if (deploymentExists) {
                            echo "DeploymentConfig ${OC_APP_NAME} sudah ada, memperbarui image..."
                            sh "oc set image dc/${OC_APP_NAME} ${OC_APP_NAME}=${DOCKER_IMAGE}:${env.DOCKER_TAG}"
                        } else {
                            echo "DeploymentConfig ${OC_APP_NAME} tidak ditemukan, membuat aplikasi baru..."
                            sh "oc new-app --image=${DOCKER_IMAGE}:${env.DOCKER_TAG} --name=${OC_APP_NAME}"
                            sh "oc expose service ${OC_APP_NAME} --port=8080"
                            sh "oc expose route ${OC_APP_NAME}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "CI/CD Pipeline berhasil diselesaikan. Aplikasi telah di-deploy!"
        }
        failure {
            echo "CI/CD Pipeline gagal. Periksa log untuk detail."
        }
    }
}
